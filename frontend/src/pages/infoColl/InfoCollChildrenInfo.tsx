import React, { useState, useImperativeHandle, forwardRef, useEffect } from 'react';
import { Box, Typography, TextField, MenuItem, Snackbar, Alert, IconButton, Button, Dialog, DialogTitle, DialogContent, DialogActions } from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import AddIcon from '@mui/icons-material/Add';
import { infoCollApi } from '../../services/api';
import InfoCollAlert from '../../components/InfoCollAlert';

const genderOptions = ['Male', 'Female', 'Other'];
const visaOptions = ['Visa Abroad', 'Adjust Status'];

interface ChildInfo {
  id?: number;
  firstName: string;
  middleName?: string;
  lastName: string;
  gender: string;
  dob: string;
  visaStatus: string;
}

interface ChildErrors {
  [key: number]: {
    [key: string]: boolean;
  };
}

const InfoCollChildrenInfo = forwardRef(({ clientCaseId, userId, userType }: { clientCaseId: number, userId: string, userType: string }, ref) => {
  const [children, setChildren] = useState<ChildInfo[]>([]);
  const [errors, setErrors] = useState<ChildErrors>({});
  const [snackbar, setSnackbar] = useState<{ open: boolean; message: string; severity: 'success' | 'error' }>({ open: false, message: '', severity: 'success' });
  const [validationDialog, setValidationDialog] = useState<{ open: boolean; message: string }>({ open: false, message: '' });

  useEffect(() => {
    if (clientCaseId) {
      infoCollApi.getChildrenInfo(clientCaseId).then(res => {
        if (res && res.data) {
          setChildren(res.data);
        }
      }).catch(() => {
        // 可以加错误提示
      });
    }
  }, [clientCaseId]);

  // 添加新的子女信息
  const handleAddChild = () => {
    setChildren(prev => [...prev, {
      firstName: '',
      lastName: '',
      gender: '',
      dob: '',
      visaStatus: ''
    }]);
  };

  // 删除子女信息
  const handleDeleteChild = (index: number) => {
    setChildren(prev => prev.filter((_, i) => i !== index));
    // 删除对应的错误状态
    setErrors(prev => {
      const newErrors = { ...prev };
      delete newErrors[index];
      return newErrors;
    });
  };

  // 更新子女信息
  const handleChildChange = (index: number, field: keyof ChildInfo, value: string) => {
    setChildren(prev => prev.map((child, i) => 
      i === index ? { ...child, [field]: value } : child
    ));
    // 清除该字段的错误状态
    setErrors(prev => ({
      ...prev,
      [index]: {
        ...prev[index],
        [field]: false
      }
    }));
  };

  // 关闭snackbar
  const handleCloseSnackbar = () => {
    setSnackbar(prev => ({ ...prev, open: false }));
  };

  // 验证表单
  const validateForm = (): boolean => {
    const newErrors: ChildErrors = {};
    let isValid = true;

    children.forEach((child, index) => {
      const childErrors: { [key: string]: boolean } = {};
      const requiredFields = ['firstName', 'lastName', 'gender', 'dob', 'visaStatus'];

      requiredFields.forEach(field => {
        if (!child[field as keyof ChildInfo]) {
          childErrors[field] = true;
          isValid = false;
        }
      });

      if (Object.keys(childErrors).length > 0) {
        newErrors[index] = childErrors;
      }
    });

    setErrors(newErrors);

    if (!isValid) {
      setValidationDialog({
        open: true,
        message: 'Please fill in all required fields.'
      });
    }

    return isValid;
  };

  // 暴露方法给父组件
  useImperativeHandle(ref, () => ({
    getFormData: () => children,
    submit: async (clientCase: any) => {
      if (!validateForm()) {
        return;
      }

      try {
        const childrenWithCaseId = children.map(child => ({
          ...child,
          clientCaseId: clientCase?.clientCaseId || clientCaseId
        }));
        await infoCollApi.submitChildrenInfo(childrenWithCaseId);
        setSnackbar({ open: true, message: 'Successfully saved', severity: 'success' });
      } catch (e: any) {
        setSnackbar({ open: true, message: e?.message || 'Save failed', severity: 'error' });
      }
    }
  }));

  return (
    <Box component="form" noValidate autoComplete="off">
      <InfoCollAlert userType={userType} />
      <Typography variant="h6" fontWeight={700} sx={{ mb: 2 }}>Children Information</Typography>
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        {userType === 'client' && (
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={handleAddChild}
            size="small"
          >
            Add Child
          </Button>
        )}
      </Box>

      {/* Respondents (autogenerated) */}
      <TextField 
        label="Respondents (autogenerated)" 
        fullWidth 
        size="small" 
        sx={{ mb: 2 }} 
        InputProps={{ readOnly: true }} 
        value={userId} 
      />

      {children.map((child, index) => (
        <Box key={index} component="form" noValidate autoComplete="off" sx={{ mb: 4, p: 2, border: '1px solid #e0e0e0', borderRadius: 1 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Typography variant="subtitle1" fontWeight={600}>Child {index + 1}</Typography>
            {userType === 'client' && (
              <Button
                variant="outlined"
                color="error"
                size="small"
                onClick={() => handleDeleteChild(index)}
              >
                Delete
              </Button>
            )}
          </Box>

          {/* First Name */}
          <TextField
            label="First Name (Child)"
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={child.firstName}
            onChange={(e) => handleChildChange(index, 'firstName', e.target.value)}
            required
            error={errors[index]?.firstName}
            helperText={errors[index]?.firstName ? 'First Name is required' : ''}
          />

          {/* Middle Name */}
          <TextField
            label="Middle Name (Child)"
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={child.middleName}
            onChange={(e) => handleChildChange(index, 'middleName', e.target.value)}
          />

          {/* Last Name */}
          <TextField
            label="Last Name (Child)"
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={child.lastName}
            onChange={(e) => handleChildChange(index, 'lastName', e.target.value)}
            required
            error={errors[index]?.lastName}
            helperText={errors[index]?.lastName ? 'Last Name is required' : ''}
          />

          {/* Gender */}
          <TextField
            label="Gender (Child)"
            select
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={child.gender}
            onChange={(e) => handleChildChange(index, 'gender', e.target.value)}
            required
            error={errors[index]?.gender}
            helperText={errors[index]?.gender ? 'Gender is required' : ''}
          >
            {genderOptions.map(opt => <MenuItem key={opt} value={opt}>{opt}</MenuItem>)}
          </TextField>

          {/* Date of Birth */}
          <TextField
            label="Date of Birth (Child)"
            type="date"
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            InputLabelProps={{ shrink: true }}
            value={child.dob}
            onChange={(e) => handleChildChange(index, 'dob', e.target.value)}
            required
            error={errors[index]?.dob}
            helperText={errors[index]?.dob ? 'Date of Birth is required' : ''}
          />

          {/* Visa Status */}
          <TextField
            label="Will he/she apply for a visa abroad or adjust status in the US?"
            select
            fullWidth
            size="small"
            sx={{ mb: 2 }}
            value={child.visaStatus}
            onChange={(e) => handleChildChange(index, 'visaStatus', e.target.value)}
            required
            error={errors[index]?.visaStatus}
            helperText={errors[index]?.visaStatus ? 'Visa Status is required' : ''}
          >
            {visaOptions.map(opt => <MenuItem key={opt} value={opt}>{opt}</MenuItem>)}
          </TextField>
        </Box>
      ))}

      {children.length === 0 && (
        <Typography color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
          No children added yet. Click "Add Child" to add children information.
        </Typography>
      )}

      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>

      <Dialog
        open={validationDialog.open}
        onClose={() => setValidationDialog({ open: false, message: '' })}
      >
        <DialogTitle>Validation Error</DialogTitle>
        <DialogContent>
          <Typography>{validationDialog.message}</Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setValidationDialog({ open: false, message: '' })}>
            OK
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
});

export default InfoCollChildrenInfo; 