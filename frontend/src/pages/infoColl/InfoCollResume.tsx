import React, { useState, useImperativeHandle, forwardRef, useEffect } from 'react';
import { Box, Typography, TextField, Snackbar, Alert, Dialog, DialogTitle, DialogContent, DialogActions, Button } from '@mui/material';
import FileUploadButton from '../../components/FileUploadButton';
import { infoCollApi } from '../../services/api';
import { extractFileName } from '../../services/s3Service';
import InfoCollAlert from '../../components/InfoCollAlert';

interface FormErrors {
  [key: string]: boolean;
}

const InfoCollResume = forwardRef(({ clientCaseId, userId, userType }: { clientCaseId: number, userId: string, userType: string }, ref) => {
  const [formData, setFormData] = useState<{ [key: string]: any }>({});
  const [errors, setErrors] = useState<FormErrors>({});
  const [snackbar, setSnackbar] = useState<{ open: boolean; message: string; severity: 'success' | 'error' }>({ open: false, message: '', severity: 'success' });
  const [validationDialog, setValidationDialog] = useState<{ open: boolean; message: string }>({ open: false, message: '' });

  useEffect(() => {
    if (clientCaseId) {
      infoCollApi.getResume(clientCaseId).then(res => {
        if (res && res.data) {
          setFormData(res.data);
        }
      }).catch(() => {
        // 可以加错误提示
      });
    }
  }, [clientCaseId]);

  // 上传文件回调
  const handleFileUrlChange = (name: string, url: string | null) => {
    setFormData(prev => ({ ...prev, [name]: url }));
    // 清除该字段的错误状态
    setErrors(prev => ({ ...prev, [name]: false }));
  };

  // 关闭snackbar
  const handleCloseSnackbar = () => {
    setSnackbar(prev => ({ ...prev, open: false }));
  };

  // 验证表单
  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};
    let isValid = true;

    // 检查 Resume 文件是否上传
    if (!formData.file) {
      newErrors.file = true;
      isValid = false;
    }

    setErrors(newErrors);

    if (!isValid) {
      setValidationDialog({
        open: true,
        message: 'Please upload the resume file.'
      });
    }

    return isValid;
  };

  // 暴露方法给父组件
  useImperativeHandle(ref, () => ({
    getFormData: () => formData,
    submit: async (clientCase: any) => {
      if (!validateForm()) {
        return;
      }

      try {
        const data = { ...formData, clientCaseId: clientCase.clientCaseId };
        await infoCollApi.submitResume(data);
        setSnackbar({ open: true, message: 'Successfully saved', severity: 'success' });
      } catch (e: any) {
        setSnackbar({ open: true, message: e?.message || 'Save failed', severity: 'error' });
      }
    }
  }));

  return (
    <Box>
      <InfoCollAlert userType={userType} />
      <Typography variant="h6" fontWeight={700} sx={{ mb: 2 }}>Resume</Typography>

      <Box component="form" noValidate autoComplete="off">
        <TextField 
          label="Respondents (autogenerated)" 
          fullWidth 
          size="small" 
          sx={{ mb: 2 }} 
          InputProps={{ readOnly: true }} 
          value={userId} 
        />

        {/* Resume Upload */}
        <FileUploadButton
          label="Upload Resume (PDF)"
          fileType="resume"
          onFileUrlChange={url => handleFileUrlChange('file', url)}
          required
          error={errors.file}
          fileUrl={formData.file}
          fileName={formData.file && extractFileName(formData.file)}
        />

        <Snackbar
          open={snackbar.open}
          autoHideDuration={4000}
          onClose={handleCloseSnackbar}
          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
        >
          <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>
            {snackbar.message}
          </Alert>
        </Snackbar>

        <Dialog
          open={validationDialog.open}
          onClose={() => setValidationDialog({ open: false, message: '' })}
        >
          <DialogTitle>Validation Error</DialogTitle>
          <DialogContent>
            <Typography>{validationDialog.message}</Typography>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setValidationDialog({ open: false, message: '' })}>
              OK
            </Button>
          </DialogActions>
        </Dialog>
      </Box>
    </Box>
  );
});

export default InfoCollResume; 